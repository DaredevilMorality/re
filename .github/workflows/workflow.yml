name: workflow

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 9999

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      continue-on-error: true

    - name: Setup
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        net user administrator ${{ secrets.ADMIN_PASSWORD }} /add
        net localgroup administrators administrator /add
      continue-on-error: true

    - name: Set Administrator UI Preferences
      shell: pwsh
      run: |
        # The path to the Administrator's user-specific registry hive.
        $userHive = "C:\Users\Administrator\NTUSER.DAT"
        
        # A temporary mount point in the HKLM registry. This can be any name that doesn't conflict.
        $regPath = "HKLM\AdministratorHive"

        # We must use a try/finally block. If the script fails for any reason
        # after loading the hive, the 'finally' block ENSURES it gets unloaded.
        # Failing to unload the hive can corrupt the user's profile.
        try {
            Write-Host "Loading Administrator user registry hive from $userHive into $regPath"
            reg.exe load $regPath $userHive
            Write-Host "Hive loaded successfully."

            # --- Set Dark Mode ---
            # This requires setting two keys for both apps and the system (taskbar, etc.)
            $themePath = "Registry::$regPath\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize"
            
            Write-Host "Setting Apps to Dark Mode..."
            Set-ItemProperty -Path $themePath -Name "AppsUseLightTheme" -Value 0 -Type DWord -Force
            
            Write-Host "Setting System to Dark Mode..."
            Set-ItemProperty -Path $themePath -Name "SystemUsesLightTheme" -Value 0 -Type DWord -Force

            # --- Set Solid Black Background ---
            # This is a two-step process:
            # 1. Set the background color itself.
            # 2. CRITICAL: Disable the image wallpaper by setting its path to an empty string.
            #    If a wallpaper is set, the solid color is ignored.
            
            Write-Host "Setting solid background color to black..."
            Set-ItemProperty -Path "Registry::$regPath\Control Panel\Colors" -Name "Background" -Value "0 0 0" -Type String -Force
            
            Write-Host "Disabling image wallpaper to make solid color visible..."
            Set-ItemProperty -Path "Registry::$regPath\Control Panel\Desktop" -Name "Wallpaper" -Value "" -Type String -Force

            Write-Host "UI preferences have been set for the Administrator user."

        }
        finally {
            # --- Unload the Hive ---
            # This is the most critical step. It saves the changes back to the NTUSER.DAT file.
            Write-Host "Unloading Administrator user registry hive."
            # Force garbage collection to release file handles before unloading.
            [gc]::Collect()
            reg.exe unload $regPath
            Write-Host "Hive unloaded."
        }
      continue-on-error: true

    - name: Add 
      shell: pwsh
      run: |
        $WshShell = New-Object -comObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut("C:\Users\Public\Desktop\Chrome_Reddit.lnk")
        $Shortcut.TargetPath = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        $Shortcut.Arguments = "--no-first-run https://reddit.com https://guerrillamail.com"
        $Shortcut.Save()
      continue-on-error: true

    - name: Install
      shell: pwsh
      run: |
        Expand-Archive nssm-2.24.zip -DestinationPath .\nssm
        $nssmDir = Get-ChildItem -Path .\nssm -Directory | Select-Object -First 1
        $nssmExe = Get-ChildItem -Path $nssmDir.FullName -Filter nssm.exe -Recurse | Select-Object -First 1
        Copy-Item -Path $nssmExe.FullName -Destination .\nssm.exe
      continue-on-error: true

    - name: Install cloudflared
      shell: pwsh
      run: |
        .\nssm.exe install cloudflared $PWD\cloudflared.exe "tunnel --url rdp://localhost:3389"
        .\nssm.exe set cloudflared AppDirectory $PWD
        .\nssm.exe set cloudflared AppExit Default Restart
        .\nssm.exe set cloudflared AppStdout $PWD\cloudflared-log.log
        .\nssm.exe set cloudflared AppStderr $PWD\cloudflared-log.log
        .\nssm.exe start cloudflared
      continue-on-error: true

    - name: Wait
      shell: pwsh
      run: |
        $found = $false
        while (-not $found) {
          Start-Sleep -Milliseconds 100
          $logContent = Get-Content "$PWD\cloudflared-log.log" -Raw
          if ($logContent -match "(https:\/\/[a-zA-Z0-9\-]+\.trycloudflare\.com)") {
            $tunnelURL = $matches[1]
            $found = $true
          }
        }

        # Get GitHub Actions run ID
        $run_id = $env:GITHUB_RUN_ID

        # Send tunnel URL to the server
        $server_url = "${{ secrets.SERVER_URL }}/update-run/$run_id"
        $server_secret = "${{ secrets.SERVER_SECRET }}"
        $headers = @{
          "Authorization" = "Bearer $server_secret"
          "Content-Type"  = "application/json"
        }
        $body = @{
          "tunnel_url" = $tunnelURL
        } | ConvertTo-Json

        Invoke-RestMethod -Uri $server_url -Method POST -Headers $headers -Body $body

      continue-on-error: true

    - name: Download
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://1111-releases.cloudflareclient.com/win/latest" -OutFile "Cloudflare_WARP_Release-x64.msi"
        msiexec /i "Cloudflare_WARP_Release-x64.msi" /qn
      continue-on-error: true

    - name: Extract
      shell: pwsh
      run: |
        $ipAddress = ""
        while (-not $ipAddress) {
          Start-Sleep -Milliseconds 100
          $logLines = Get-Content "$PWD\cloudflared-log.log"
          foreach ($line in $logLines) {
            if ($line -match "ip=(\d{1,3}(?:\.\d{1,3}){3})") {
              $ipAddress = $matches[1]
              break
            }
          }
        }

        Add-Content -Path $env:GITHUB_ENV -Value "TUNNEL_IP=$ipAddress"

      continue-on-error: true

    - name: Create
      shell: pwsh
      run: |
        $batchContent = @"
        @echo off
        set "warpCliPath=C:\Program Files\Cloudflare\Cloudflare WARP\warp-cli.exe"
        "%warpCliPath%" registration new
        "%warpCliPath%" mode warp
        "%warpCliPath%" tunnel ip add $env:TUNNEL_IP
        "%warpCliPath%" connect
        pause
        "@
        
        Set-Content -Path "C:\Users\Public\Desktop\Cloudflare_WARP.bat" -Value $batchContent
      continue-on-error: true

    - name: Add 2
      shell: pwsh
      run: |
        $WshShell   = New-Object -ComObject WScript.Shell
        $linkPath    = "C:\Users\Public\Desktop\Cloudflare_WARP_Installer.lnk"
        $targetMsI   = "$PWD\Cloudflare_WARP_Release-x64.msi"
        $Shortcut    = $WshShell.CreateShortcut($linkPath)
        $Shortcut.TargetPath = $targetMsI
        $Shortcut.Description = "Cloudflare WARP Installer"
        $Shortcut.Save()
      continue-on-error: true

    - name: Keep
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 36000
        }
      continue-on-error: true
