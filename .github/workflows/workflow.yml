name: workflow

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 9999

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      continue-on-error: true

    - name: Setup
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        net user administrator ${{ secrets.ADMIN_PASSWORD }} /add
        net localgroup administrators administrator /add
      continue-on-error: true

    - name: Add 
      shell: pwsh
      run: |
        $WshShell = New-Object -comObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut("C:\Users\Public\Desktop\Chrome_Reddit.lnk")
        $Shortcut.TargetPath = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        $Shortcut.Arguments = "https://reddit.com https://guerrillamail.com"
        $Shortcut.Save()
      continue-on-error: true

    - name: Install
      shell: pwsh
      run: |
        Expand-Archive nssm-2.24.zip -DestinationPath .\nssm
        $nssmDir = Get-ChildItem -Path .\nssm -Directory | Select-Object -First 1
        $nssmExe = Get-ChildItem -Path $nssmDir.FullName -Filter nssm.exe -Recurse | Select-Object -First 1
        Copy-Item -Path $nssmExe.FullName -Destination .\nssm.exe
      continue-on-error: true

    - name: Install cloudflared
      shell: pwsh
      run: |
        .\nssm.exe install cloudflared $PWD\cloudflared.exe "tunnel --url rdp://localhost:3389"
        .\nssm.exe set cloudflared AppDirectory $PWD
        .\nssm.exe set cloudflared AppExit Default Restart
        .\nssm.exe set cloudflared AppStdout $PWD\cloudflared-log.log
        .\nssm.exe set cloudflared AppStderr $PWD\cloudflared-log.log
        .\nssm.exe start cloudflared
      continue-on-error: true

    - name: Wait
      shell: pwsh
      run: |
        $found = $false
        while (-not $found) {
          Start-Sleep -Milliseconds 100
          $logContent = Get-Content "$PWD\cloudflared-log.log" -Raw
          if ($logContent -match "(https:\/\/[a-zA-Z0-9\-]+\.trycloudflare\.com)") {
            $tunnelURL = $matches[1]
            $found = $true
          }
        }

        $EncryptionKey = [System.Text.Encoding]::UTF8.GetBytes("${{ secrets.ENCRYPTION_KEY }}")

        $plaintext = $tunnelURL
        $aes = New-Object System.Security.Cryptography.AesManaged
        $aes.KeySize = 256
        $aes.BlockSize = 128
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aes.Key = $EncryptionKey
        $aes.GenerateIV()
        $IV = $aes.IV
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)
        $plaintextBytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)
        $encryptedBytes = $encryptor.TransformFinalBlock($plaintextBytes, 0, $plaintextBytes.Length)

        $final = New-Object System.IO.MemoryStream
        $final.Write($IV, 0, $IV.Length)
        $final.Write($encryptedBytes, 0, $encryptedBytes.Length)
        $encryptedBase64 = [System.Convert]::ToBase64String($final.ToArray())
        
        Write-Host "ENCRYPTED_TUNNEL_URL=$encryptedBase64"
      continue-on-error: true

    - name: Download
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://1111-releases.cloudflareclient.com/win/latest" -OutFile "Cloudflare_WARP_Release-x64.msi"
        msiexec /i "Cloudflare_WARP_Release-x64.msi" /qn
      continue-on-error: true

    - name: Extract
      shell: pwsh
      run: |
        $ipAddress = ""
        while (-not $ipAddress) {
          Start-Sleep -Milliseconds 100
          $logLines = Get-Content "$PWD\cloudflared-log.log"
          foreach ($line in $logLines) {
            if ($line -match "ip=(\d{1,3}(?:\.\d{1,3}){3})") {
              $ipAddress = $matches[1]
              break
            }
          }
        }

        Add-Content -Path $env:GITHUB_ENV -Value "TUNNEL_IP=$ipAddress"

        $EncryptionKey = [System.Text.Encoding]::UTF8.GetBytes("${{ secrets.ENCRYPTION_KEY }}")
        $plaintext = $ipAddress
        $aes = New-Object System.Security.Cryptography.AesManaged
        $aes.KeySize = 256
        $aes.BlockSize = 128
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aes.Key = $EncryptionKey
        $aes.GenerateIV()
        $IV = $aes.IV
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)
        $plaintextBytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)
        $encryptedBytes = $encryptor.TransformFinalBlock($plaintextBytes, 0, $plaintextBytes.Length)

        $final = New-Object System.IO.MemoryStream
        $final.Write($IV, 0, $IV.Length)
        $final.Write($encryptedBytes, 0, $encryptedBytes.Length)
        $encryptedBase64 = [System.Convert]::ToBase64String($final.ToArray())

        Write-Host "ENCRYPTED_IP=$encryptedBase64"
      continue-on-error: true

    - name: Create
      shell: pwsh
      run: |
        $batchContent = @"
        @echo off
        set "warpCliPath=C:\Program Files\Cloudflare\Cloudflare WARP\warp-cli.exe"
        "%warpCliPath%" registration new
        "%warpCliPath%" mode warp
        "%warpCliPath%" tunnel ip add $env:TUNNEL_IP
        "%warpCliPath%" connect
        pause
        "@
        
        Set-Content -Path "C:\Users\Public\Desktop\Configure_Cloudflare_WARP.bat" -Value $batchContent
      continue-on-error: true

    - name: Fetch
      shell: pwsh
      run: |
        $publicIP = Invoke-RestMethod -Uri 'https://api.ipify.org?format=json' | Select-Object -ExpandProperty ip

        $EncryptionKey = [System.Text.Encoding]::UTF8.GetBytes("${{ secrets.ENCRYPTION_KEY }}")
        $plaintext = $publicIP
        $aes = New-Object System.Security.Cryptography.AesManaged
        $aes.KeySize = 256
        $aes.BlockSize = 128
        $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aes.Key = $EncryptionKey
        $aes.GenerateIV()
        $IV = $aes.IV
        $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)
        $plaintextBytes = [System.Text.Encoding]::UTF8.GetBytes($plaintext)
        $encryptedBytes = $encryptor.TransformFinalBlock($plaintextBytes, 0, $plaintextBytes.Length)

        $final = New-Object System.IO.MemoryStream
        $final.Write($IV, 0, $IV.Length)
        $final.Write($encryptedBytes, 0, $encryptedBytes.Length)
        $encryptedBase64 = [System.Convert]::ToBase64String($final.ToArray())

        Write-Host "ENCRYPTED_PUBLIC_IP=$encryptedBase64"
      continue-on-error: true

    - name: Keep
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 36000
        }
      continue-on-error: true