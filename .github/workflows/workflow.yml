name: workflow

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 9999

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      continue-on-error: true

    - name: Setup
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

        net user administrator ${{ secrets.ADMIN_PASSWORD }} /add
        net localgroup administrators administrator /add
      continue-on-error: true

name: workflow
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-2022
    timeout-minutes: 9999
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      continue-on-error: true
    
    - name: Setup RDP
      shell: pwsh
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
      continue-on-error: true
    
    - name: Force Desktop Session and Apply Theme
      shell: pwsh
      run: |
        # Create a black wallpaper image
        Add-Type -AssemblyName System.Drawing
        $bitmap = New-Object System.Drawing.Bitmap(1920, 1080)
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.Clear([System.Drawing.Color]::Black)
        $wallpaperPath = "C:\Windows\Temp\black_wallpaper.bmp"
        $bitmap.Save($wallpaperPath, [System.Drawing.Imaging.ImageFormat]::Bmp)
        $graphics.Dispose()
        $bitmap.Dispose()
        
        # Set dark mode registry keys for Administrator user
        $adminSID = (Get-LocalUser -Name "Administrator").SID.Value
        
        # Load Administrator's registry hive if not already loaded
        reg load "HKU\$adminSID" "C:\Users\Administrator\NTUSER.DAT" 2>$null
        
        # Dark mode settings
        Set-ItemProperty -Path "HKU:\$adminSID\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "AppsUseLightTheme" -Value 0 -Force
        Set-ItemProperty -Path "HKU:\$adminSID\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" -Name "SystemUsesLightTheme" -Value 0 -Force
        
        # Wallpaper settings
        Set-ItemProperty -Path "HKU:\$adminSID\Control Panel\Desktop" -Name "Wallpaper" -Value $wallpaperPath -Force
        Set-ItemProperty -Path "HKU:\$adminSID\Control Panel\Desktop" -Name "WallpaperStyle" -Value "0" -Force
        Set-ItemProperty -Path "HKU:\$adminSID\Control Panel\Desktop" -Name "TileWallpaper" -Value "0" -Force
        
        # Force desktop refresh using Windows API
        Add-Type -TypeDefinition @"
        using System;
        using System.Runtime.InteropServices;
        public class Win32 {
            [DllImport("user32.dll", SetLastError = true)]
            public static extern bool SystemParametersInfo(uint uiAction, uint uiParam, string pvParam, uint fWinIni);
            
            [DllImport("user32.dll")]
            public static extern bool SetProcessDPIAware();
            
            public const uint SPI_SETDESKWALLPAPER = 0x0014;
            public const uint SPIF_UPDATEINIFILE = 0x01;
            public const uint SPIF_SENDCHANGE = 0x02;
        }
        "@
        
        # Start explorer process for Administrator to create desktop session
        $processInfo = New-Object System.Diagnostics.ProcessStartInfo
        $processInfo.FileName = "explorer.exe"
        $processInfo.UseShellExecute = $false
        $processInfo.CreateNoWindow = $false
        $process = [System.Diagnostics.Process]::Start($processInfo)
        Start-Sleep -Seconds 5
        
        # Apply wallpaper change
        [Win32]::SystemParametersInfo([Win32]::SPI_SETDESKWALLPAPER, 0, $wallpaperPath, [Win32]::SPIF_UPDATEINIFILE -bor [Win32]::SPIF_SENDCHANGE)
        
        # Force theme refresh by restarting explorer
        Get-Process -Name "explorer" -ErrorAction SilentlyContinue | Stop-Process -Force
        Start-Sleep -Seconds 2
        Start-Process "explorer.exe"
        
        # Alternative: Use rundll32 to refresh desktop
        Start-Process -FilePath "rundll32.exe" -ArgumentList "user32.dll,UpdatePerUserSystemParameters" -Wait
        
        Write-Host "Dark mode and black wallpaper applied for Administrator user"
      continue-on-error: true
    
    - name: Keep Alive
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 36000
        }
      continue-on-error: true

    - name: Add 
      shell: pwsh
      run: |
        $WshShell = New-Object -comObject WScript.Shell
        $Shortcut = $WshShell.CreateShortcut("C:\Users\Public\Desktop\Chrome_Reddit.lnk")
        $Shortcut.TargetPath = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        $Shortcut.Arguments = "--no-first-run https://reddit.com https://guerrillamail.com"
        $Shortcut.Save()
      continue-on-error: true

    - name: Install
      shell: pwsh
      run: |
        Expand-Archive nssm-2.24.zip -DestinationPath .\nssm
        $nssmDir = Get-ChildItem -Path .\nssm -Directory | Select-Object -First 1
        $nssmExe = Get-ChildItem -Path $nssmDir.FullName -Filter nssm.exe -Recurse | Select-Object -First 1
        Copy-Item -Path $nssmExe.FullName -Destination .\nssm.exe
      continue-on-error: true

    - name: Install cloudflared
      shell: pwsh
      run: |
        .\nssm.exe install cloudflared $PWD\cloudflared.exe "tunnel --url rdp://localhost:3389"
        .\nssm.exe set cloudflared AppDirectory $PWD
        .\nssm.exe set cloudflared AppExit Default Restart
        .\nssm.exe set cloudflared AppStdout $PWD\cloudflared-log.log
        .\nssm.exe set cloudflared AppStderr $PWD\cloudflared-log.log
        .\nssm.exe start cloudflared
      continue-on-error: true

    - name: Wait
      shell: pwsh
      run: |
        $found = $false
        while (-not $found) {
          Start-Sleep -Milliseconds 100
          $logContent = Get-Content "$PWD\cloudflared-log.log" -Raw
          if ($logContent -match "(https:\/\/[a-zA-Z0-9\-]+\.trycloudflare\.com)") {
            $tunnelURL = $matches[1]
            $found = $true
          }
        }

        # Get GitHub Actions run ID
        $run_id = $env:GITHUB_RUN_ID

        # Send tunnel URL to the server
        $server_url = "${{ secrets.SERVER_URL }}/update-run/$run_id"
        $server_secret = "${{ secrets.SERVER_SECRET }}"
        $headers = @{
          "Authorization" = "Bearer $server_secret"
          "Content-Type"  = "application/json"
        }
        $body = @{
          "tunnel_url" = $tunnelURL
        } | ConvertTo-Json

        Invoke-RestMethod -Uri $server_url -Method POST -Headers $headers -Body $body

      continue-on-error: true

    - name: Download
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://1111-releases.cloudflareclient.com/win/latest" -OutFile "Cloudflare_WARP_Release-x64.msi"
        msiexec /i "Cloudflare_WARP_Release-x64.msi" /qn
      continue-on-error: true

    - name: Extract
      shell: pwsh
      run: |
        $ipAddress = ""
        while (-not $ipAddress) {
          Start-Sleep -Milliseconds 100
          $logLines = Get-Content "$PWD\cloudflared-log.log"
          foreach ($line in $logLines) {
            if ($line -match "ip=(\d{1,3}(?:\.\d{1,3}){3})") {
              $ipAddress = $matches[1]
              break
            }
          }
        }

        Add-Content -Path $env:GITHUB_ENV -Value "TUNNEL_IP=$ipAddress"

      continue-on-error: true

    - name: Create
      shell: pwsh
      run: |
        $batchContent = @"
        @echo off
        set "warpCliPath=C:\Program Files\Cloudflare\Cloudflare WARP\warp-cli.exe"
        "%warpCliPath%" registration new
        "%warpCliPath%" mode warp
        "%warpCliPath%" tunnel ip add $env:TUNNEL_IP
        "%warpCliPath%" connect
        pause
        "@
        
        Set-Content -Path "C:\Users\Public\Desktop\Cloudflare_WARP.bat" -Value $batchContent
      continue-on-error: true

    - name: Add 2
      shell: pwsh
      run: |
        $WshShell   = New-Object -ComObject WScript.Shell
        $linkPath    = "C:\Users\Public\Desktop\Cloudflare_WARP_Installer.lnk"
        $targetMsI   = "$PWD\Cloudflare_WARP_Release-x64.msi"
        $Shortcut    = $WshShell.CreateShortcut($linkPath)
        $Shortcut.TargetPath = $targetMsI
        $Shortcut.Description = "Cloudflare WARP Installer"
        $Shortcut.Save()
      continue-on-error: true

    - name: Keep
      shell: pwsh
      run: |
        while ($true) {
          Start-Sleep -Seconds 36000
        }
      continue-on-error: true
